

//双链表每个节点，除了有指向后面节点的指针，又多了一个指向前面节点的指针
//不设置头节点和空节点，将下标为0的作为头节点，将下表为1的作为尾节点，如果说在        最左边或最右边插入一个x就是在头节点之后，尾节点之前插入，头节点和尾节点是不能变的
//单链表只能在下标k后面插入，因为只知道后面的下标是多少，双链表就可以在k的前后插入都可以

#include<iostream>
using namespace std;

const int N = 100010;
int l[N], r[N], idx, e[N];
int m;

void init()//初始化，头节点尾节点相互链接    注意写题的时候  要用初始化函数，容易忘用
{
	r[0] = 1;
	l[1] = 0;
	idx = 2;
}

void add(int k, int x)//在下标k的右边插入x，如果想在下标k左边插入，既是在下标k左边节点的右边插入，只需 将k左边节点的下标  l[k]作为参数
{
	e[idx] = x;//首先先让值x放进去
	r[idx] = r[k];//再让要插入的点伸出链接，连到左右两个点
	l[idx] = k;//直接就是k
	l[r[k]] = idx;//最后让左右两个点与要插入的点链接，注意最后两步的顺序，也不能反
	r[k] = idx;//先用r【k】，再让r【k】改变
	idx++;
}

void remove(int k)//删掉下标k节点，只需将前面的和后面的链接起来即可
{
	r[l[k]] = r[k];
	l[r[k]] = l[k];
}

int main()
{
	for (int i = r[0]; i != 1; i = r[i])cout << e[i] << ' ';//输出单链表，注意i从0后面开始。0是头节点不存储值

	return 0;
}