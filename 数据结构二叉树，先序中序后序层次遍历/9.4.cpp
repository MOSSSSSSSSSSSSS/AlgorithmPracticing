
//二叉树左右子树不能颠倒，二叉树是有序树
// 二叉树和度为2的树的区别：①度为2的树是至少有一个节点度为2，所有节点的度最大是2；二叉树所有节点的度可以是0，1，2.
//                          ②度为2的树无序，子树无左右之分


//二叉树性质：叶节点个数是度为2的节点个数+1
//高度为h的二叉树最多有2的h次方-1个节点，高度为h的m叉树最多有（m的h次方-1）/（m-1）个节点

//形态上：
//满二叉树：如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。满二叉树从上到下从左到右编号，若某个节点编号为i，则它的左节点2*i，右节点2*i+1，父节点 i / 2
//完全二叉树：如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。最多有一个度为1的节点。从上到下从左到右编号，若某个节点编号为i，则它的左节点2*i，右节点2*i+1，父节点 i / 2。i<=n/2是分支节点（一分支，二分支），i>n/2是叶节点
//有n个节点的完全二叉树，高度为  log（n+1）向上取整或logn向下取整再+1，也可以计算完全二叉树第i个节点所在层次
// 完全二叉树已知n个节点，可以求出n0，n1，n2各为多少
//功能上：
//二叉排序树：比根节点的关键字小的在左子树，比根节点的关键字大的在右子树
//平衡二叉树：树上任何一个节点都满足，其左子树的深度与右子树的深度的差值小于等于1，如果二叉排序树是平衡的，搜索效率会提高


//二叉树顺序存储，链式存储：



//  二叉树先序遍历：一个小人从一棵二叉树根节点为起点，沿着二叉树外沿，逆时针走一圈回到根节点，路上遇到的元素顺序，就是先序遍历的结果
//  中序遍历：二叉树每个节点，垂直方向投影下来（可以理解为每个节点从最左边开始垂直掉到地上），然后从左往右数，得出的结果便是中序遍历的结果
//  后序遍历：还记得我上面提到先序遍历绕圈的路线么？（不记得翻上面理解）就是围着树的外围绕一圈，如果发现一剪刀就能剪下的葡萄（必须是一颗葡萄）
//      （也就是葡萄要一个一个掉下来，不能一口气掉超过1个这样），就把它剪下来，组成的就是后序遍历了。后序遍历中，根节点默认最后面
//  层次遍历：就是从根节点开始，一层一层，从上到下，每层从左到右，依次写值就可以了


//  如果已知 前序遍历 是 ABCDEFG，只能确定根节点是A ，左子树，右子树不确定，左子树可能是B，可能是BCD，可能是BCDEF
//  如果已知 后序遍历 是 ABCDEFG, 只能确定根节点是G ，左子树，右子树不确定，左子树可能是B，可能是ABC
//  中序遍历：如果已知根节点，就知道左子树和右子树，如ABCDEFG根节点是D，则左子树是ABC，右子树是EFG，但不能知道左子树的根，右子树的根，这个可以通过前/后序知道
//  所以可以通过 前/后和中序构造出二叉树
